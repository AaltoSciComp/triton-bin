#!/usr/bin/env python

"""Automatic jupyter running within slurm.

Run sjupyter to start a notebook on remote server.  There are various
options that control jupyter, for example pass --cluster in order to
start an ipython cluster which uses the slurm CPUs.



Notes:

* in order for "jupyter notebook list" to work, you must unset
XDG_RUNTIME_DIR.


"""

from __future__ import print_function

import argparse
import os
import socket
import subprocess
import time

# These arguments are used and consumed by the outer script.  Anything
# that is not listed here is passed to the srun command.  Things which
# need to be passed to the internal jupyter command have to be
# captured here and then re-added to the command at the bottom
# (example: --cluster)
parser_outer = argparse.ArgumentParser(usage=__file__+" [args] [srun-args] [-- [jupyter-args]]")
parser_outer.add_argument("--internal", action='store_true',
                          help="Do not use (runs in batch)")
parser_outer.add_argument("--cluster", action='store_true',
                          help="Start ipython cluster, considers slurm -c option. (not implemented)")
parser_outer.add_argument("--jupyter-arg",
                          help="Argument to pass to jupyter (not implemented)")
parser_outer.add_argument("-p", "--partition", default="interactive",
                          help="slurm partition to use, default=interactive")
parser_outer.add_argument("-l", "--list", action="store_true",
                          help="List currently running notebooks.")
parser_outer.add_argument("-v", "--verbose", action="store_true",
                          help="Verbose.")

# These arguments are parsed but passed on to srun.
parser_inner = argparse.ArgumentParser()

args, remaining        = parser_outer.parse_known_args()
args_inner, remaining2 = parser_inner.parse_known_args()

if args.verbose: print(args, remaining)
if args.verbose: print(args_inner, remaining2)

#
# Basic setup
#
# Pick random port for jupyter.  It's OK if we have collisions,
# jupyter tries many ports starting at this one.
JPORT = (os.getuid() % 60000) + 5500
# Does jupyter exist on the path?
ret = subprocess.call(["which", "jupyter"], stdout=open("/dev/null", 'w'))
if ret != 0:
    print("ERROR: jupyter is not in PATH")
    exit(1)



#
# Internal script: start jupyter inside of a slurm task
#
if args.internal:
    hostname = socket.getfqdn()

    if args.cluster:
        n_cpus = int(os.environ['SLURM_CPUS_ON_NODE'])
        print("N cpus:", n_cpus)
        #srun ipcluster start --n=n_cpus
        print("Waiting 20 seconds for cluster to start...")
        time.sleep(20)

    print("""\
********************
* Starting jupyter.  To cancel, C-c C-c twice within one second
* (to kill srun).
********************""")

    os.environ.pop('XDG_RUNTIME_DIR', None)
    cmd = ["srun", "jupyter", "notebook", "--no-browser",
               "--port=%d"%JPORT,
               "--ip=%s"%hostname]
    cmd += remaining
    if args.verbose: print(cmd)
    os.execvp(cmd[0], cmd)



#
# List running notebook servers.  We have to unset XDG_RUNTIME_DIR
# since it is unset when the notebooks are started, and this end su
# pbeing used to store the running server list.
#
if args.list or (remaining and remaining[0] == 'list'):
    del os.environ['XDG_RUNTIME_DIR']
    #os.execvpe('jupyter', ['jupyter', 'notebook', 'list'], env=os.environ)
    subprocess.call(['jupyter', 'notebook', 'list'])
    exit(1)



#
# Outer wrapper: This does the submiting of the job to slurm.
#

#grep -E 'c.NotebookApp.password.*=.*.{10,}' ~/.jupyter/jupyter_notebook_config.py
print("""\
********************
* ssh to triton with
*   'ssh -D 8123:localhost username@triton.aalto.fi'
*
* Create a new broweser instance
* Change the proxy of that browser to localhost:8123, SOCKS5
* Connect to jupyter using the URL that is printed.
*
* OR:
*   ssh -L NNNN:hostname-of-server:NNNN triton.aalto.fi
*   and connect to localhost:NNNN
********************""")

# Start srun with remaining command line parameters, execute same
# script with --internal parameter.
cmd_srun = ['srun', '--pty', ]
cmd_srun.append('--partition='+args.partition)

cmd_jupyter = [os.path.abspath(__file__), '--internal']

if args.cluster:
    cmd_jupyter.append('--cluster')
if args.verbose:
    cmd_jupyter.append('--verbose')

if '--' in remaining:
    split_idx = remaining.index('--')
    cmd_srun += remaining[:split_idx]
    cmd_jupyter += remaining[split_idx+1:]
else:
    cmd_srun += remaining



# XDG_RUNTIME_DIR isn't valid on run host
del os.environ['XDG_RUNTIME_DIR']
if args.verbose: print(cmd_srun + cmd_jupyter)
os.execvp(cmd_srun[0], cmd_srun + cmd_jupyter)


#srun --pty $* jupyter notebook --port=$PORT --ip='*' --debug --no-browser

