#!/appl/manual_installations/software/slurm2sql/live/venv/bin/python
import argparse
import sqlite3

import slurm2sql
from tabulate import tabulate

description = """\
Prints an overall summary of users whose jobs
"""
parser = argparse.ArgumentParser()
parser.add_argument('--md', action='store_true', help='Markdown')
parser.add_argument('--start', '-S', default='now-2day', help='Start time, default=%(default)s')
parser.add_argument('--count', '-c', default=5, type=int, help='Number of rows for each measure, default=%(default)s')
parser.add_argument('--native-order', action='store_true', help="Don't use a heuristic to sort by most important to check")
parser.add_argument('--db', help="Read from this DB.  Don't import new data.  There is no chance to apply any sacct filters, so you should have created the database with the right filters already.")
args = parser.parse_args()


sacct_filter = ['-a', '-S', args.start, '-E', 'now', '--state', slurm2sql.COMPLETED_STATES]
db = slurm2sql.import_or_open_db(args, sacct_filter)

#if args.md:
#    print("## User resource wastage")
#    print(f"Report of the least efficienct users of CPU/mem/GPU since {args.start}.  Rerun yourself with `module load slurm2sql ; scheck --start='{args.start}'`.", end=" ")

for name, order in [
        ('cpu_day_waste',     'sum((1-CPUeff)*Elapsed*NCPUS* (1-min(max(MemEff,coalesce(GPUeff,0)),1)))'),
        ('mem_GiB_day_waste', 'sum((1-MemEff)*Elapsed*MemReq*(1-min(max(CPUEff, coalesce(GPUeff,0)),1)))'),
        #('gpu_day_waste',     'sum((1-GPUeff)*Elapsed*NGPUs* (1-min(max(CPUeff, MemEff),1)))')]:
        ('gpu_day_waste',     'gpu_day_waste')]:
    print(f'### {name}')
    cur = db.execute(f"""
    SELECT
    User,
    round(sum(Elapsed)/86400,1) AS days,

    round(sum(Elapsed*NCPUS)/86400,1) AS cpu_day,
    round(sum((1-CPUeff)*Elapsed*NCPUS)/86400,1) AS cpu_day_waste,
    --round(sum((1-CPUeff)*Elapsed*NCPUS*(1-max(MemEff,coalesce(GPUeff,0))))/86400    ,1) AS cpu_day_waste2,
    printf("%2.0f%%", 100*sum(Elapsed*NCPUS*CPUEff)/sum(Elapsed*NCPUS)) AS CPUEff,

    round(sum(Elapsed*MemReq)/1073741824/86400,1) AS mem_GiB_day,
    round(sum((1-MemEff)*Elapsed*MemReq)/1073741824/86400,1) AS mem_GiB_day_waste,
    --round(sum((1-MemEff)*Elapsed*MemReq*(1-max(CPUEff, coalesce(GPUeff,0))))/1073741824/86400,    1) AS mem_GiB_day_waste2,
    printf("%2.0f%%", 100*sum(Elapsed*MemReq*MemEff)/sum(Elapsed*MemReq)) AS MemEff,

    round(sum(Elapsed*NGPUs)/86400,1) AS gpu_day,
    round(sum((1-GPUeff)*Elapsed*NGPUs)/86400,1) AS gpu_day_waste,
    --round(sum((1-GPUeff)*Elapsed*NGPUs*(1-max(CPUeff, MemEff)))/86400,    1) AS gpu_day_waste2,
    iif(sum(NGpus), printf("%2.0f%%", 100*sum(Elapsed*NGPUs*GPUeff)/sum(Elapsed*NGPUs)), NULL) AS GPUEff

    FROM eff
    WHERE End IS NOT NULL
    GROUP BY user
    ORDER BY {name if args.native_order else order} DESC NULLS LAST
    LIMIT {args.count}
    """)
    headers = [ x[0] for x in cur.description ]
    data = cur.fetchall()
    print(tabulate(data, headers=headers,
                       tablefmt=('github' if args.md else slurm2sql.compact_table()),
                       colalign=('left', 'decimal',)+('decimal', 'right')*3))
    print()
